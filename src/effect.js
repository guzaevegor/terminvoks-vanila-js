class Effect {
    constructor(canvas, video) {
        this.canvas = canvas;
        this.video = video;
        this.ctx = this.canvas.getContext('2d');

        const audioCtx = new AudioContext();
        this.osc = audioCtx.createOscillator();
        this.gainNode = audioCtx.createGain();
        this.filterNode = audioCtx.createBiquadFilter(); // –§–∏–ª—å—Ç—Ä –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è —Ç–æ–Ω–∞

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞
        this.filterNode.type = 'lowpass';
        this.filterNode.frequency.value = 1000; // –ß–∞—Å—Ç–æ—Ç–∞ —Å—Ä–µ–∑–∞ —Ñ–∏–ª—å—Ç—Ä–∞
        this.filterNode.Q.value = 1; // –†–µ–∑–æ–Ω–∞–Ω—Å

        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–∑–ª–æ–≤
        this.osc.connect(this.filterNode).connect(this.gainNode).connect(audioCtx.destination);

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä–∞
        this.osc.type = 'triangle'; // –ú—è–≥–∫–∏–π —Ç–æ–Ω
        this.osc.frequency.value = 0; // –ß–∞—Å—Ç–æ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.gainNode.gain.value = 0; // –ì—Ä–æ–º–∫–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.osc.start();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        this.threshold = 160;
        this.g_freq = 230; // –ó–µ–ª–µ–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —á–∞—Å—Ç–æ—Ç—ã
        this.b_volume = 230; // –°–∏–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏

        this.isMuted = true; // –§–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º—É—Ç–∞
        this.isMirrored = false; // –§–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–µ—Ä–∫–∞–ª—å–Ω–æ—Å—Ç–∏

        this.#animate();
    }

    setThreshold(newThreshold) {
        this.threshold = newThreshold;
    }

    setGreenComponent(value) {
        this.g_freq = value; // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –∑–µ–ª–µ–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    }

    setBlueComponent(value) {
        this.b_volume = value; // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–∏–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    }

    mute() {
        this.isMuted = true;
        this.gainNode.gain.value = 0; // –û—Ç–∫–ª—é—á–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å
    }

    unmute() {
        this.isMuted = false;
        this.gainNode.gain.value = 1; // –í–∫–ª—é—á–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    }

    toggleMute() {
        if (this.isMuted) {
            this.unmute();
        } else {
            this.mute();
        }
        const muteButton = document.querySelector(".mute-button");
        if (muteButton) {
            muteButton.textContent = this.isMuted ? "üîä" : "üîá";
        }
    }

    setMirror(isMirrored) {
        this.isMirrored = isMirrored;
    }

    #animate() {
        const { ctx, canvas, video, threshold, g_freq, b_volume, isMirrored } = this;
        ctx.clearRect(0, 0, canvas.width, canvas.height); // –û—á–∏—Å—Ç–∫–∞ —Ö–æ–ª—Å—Ç–∞
        ctx.save();
        if (isMirrored) {
            ctx.scale(-1, 1); // –û—Ç—Ä–∞–∑–∏—Ç—å –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
            ctx.translate(-canvas.width, 0); // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ –≤–∏–¥–∏–º—É—é –æ–±–ª–∞—Å—Ç—å
        }
        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
        ctx.restore();
        const imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);

        const locs_freq = getLocationsWithColor(imgData, { r: 0, g: g_freq, b: 0 }, threshold); // –ß–∞—Å—Ç–æ—Ç–∞
        const locs_volume = getLocationsWithColor(imgData, { r: 0, g: 0, b: b_volume }, threshold); // –ì—Ä–æ–º–∫–æ—Å—Ç—å

        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–µ–ª–µ–Ω—ã—Ö —Ç–æ—á–µ–∫
        ctx.fillStyle = "green";
        locs_freq.forEach(loc => {
            ctx.fillRect(loc.x, loc.y, 1, 1);
        });

        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç–æ–π
        if (locs_freq.length > 0) {
            const center_freq = average(locs_freq);
            const p = center_freq.x / canvas.width;
            const freq = 200 + 500 * p;
            this.osc.frequency.value = freq;

            // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            const filterCutoff = 500 + 2000 * (1 - center_freq.y / canvas.height);
            this.filterNode.frequency.value = filterCutoff;

            ctx.beginPath();
            ctx.fillStyle = "green";
            ctx.arc(center_freq.x, center_freq.y, 5, 0, 2 * Math.PI);
            ctx.fill();
            ctx.beginPath();
            ctx.strokeStyle = "green";
            ctx.lineWidth = 5;
            ctx.moveTo(center_freq.x, 0);
            ctx.lineTo(center_freq.x, canvas.height);
            ctx.stroke();
        } else {
            this.osc.frequency.value = 0;
        }

        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∏–Ω–∏—Ö —Ç–æ—á–µ–∫
        ctx.fillStyle = "blue";
        locs_volume.forEach(loc => {
            ctx.fillRect(loc.x, loc.y, 1, 1);
        });

        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å—é
        if (locs_volume.length > 0) {
            const center_volume = average(locs_volume);
            const p_volume = 1 - center_volume.y / canvas.height;
            const volume = Math.min(Math.max(p_volume, 0), 1);
            if (!this.isMuted) {
                this.gainNode.gain.value = volume; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –º—É—Ç
            }

            ctx.beginPath();
            ctx.fillStyle = "blue";
            ctx.arc(center_volume.x, center_volume.y, 5, 0, 2 * Math.PI);
            ctx.fill();
            ctx.beginPath();
            ctx.strokeStyle = "blue";
            ctx.lineWidth = 5;
            ctx.moveTo(0, center_volume.y);
            ctx.lineTo(canvas.width, center_volume.y);
            ctx.stroke();
        } else {
            this.gainNode.gain.value = 0;
        }

        requestAnimationFrame(this.#animate.bind(this));
    }
}
